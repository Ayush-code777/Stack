#include <stdio.h>
#include <stdlib.h>
#include <string.h>


struct stack{
    int size;
    int top;
    char * arr;
};


int isEmpty(struct stack *p){
    if(p->top<0){
        return 1;
    }else{
        return 0;
    }
}

int isFull(struct stack* p){
    if(p->top==p->size-1){
        return 1;
    }else{
        return 0;
    }
}
void push(struct stack *p,char value){
    if(isFull(p)){
        printf("Stack verflow");
    }
    else{
        p->top++;
        p->arr[p->top]=value;
    }
}

char pop(struct stack *top){
    if(isEmpty(top)){
        printf("Stack underflow , cannot remove elements");
    }else{
        char value=top->arr[top->top];
        top->top--;
        return value;
    }

}

void check(struct stack *sp){
    if(isEmpty(sp)){
        printf("The stack is empty\n");
    }else{
        printf("The stack is not empty\n");
    }
}

char StackTop(struct stack * p){
    return p->arr[p->top];
}


int precedent(char ac){
    if(ac=='*' || ac=='/'){
        return 3;
    }
    else if(ac=='+' || ac=='-'){
        return 2;
    }
    else{
        return 0;
    }
}


int isOperator(char ch){
    if(ch=='+' || ch=='-' || ch=='*' || ch=='/'){
        return 1;
    }
    else{
        return 0;
    }
}

char* inTopo(char *infix){
    struct stack *s=(struct stack*)malloc(sizeof(struct stack));
    s->size=20;
    s->top=-1;
    s->arr=(char*)malloc(s->size*sizeof(char));
    char * postfix=(char*)malloc((strlen(infix)+1)*sizeof(char));
    int i=0,j=0;
    while(infix[i]!='\0'){
        if(!isOperator(infix[i])){
            postfix[j]=infix[i];
            i++;
            j++;
        }else{
            if(precedent(infix[i])>precedent(StackTop(s))){
                push(s,infix[i]);  // will ultimately push inside it.
                i++;
            }
            else{

                //while(precedent(infix[i])<=precedent(StackTop(s))){
                postfix[j]=pop(s);
                j++;


                //}
                //push(s,infix[i]);
                
            }
        }
    }
    while(!isEmpty(s)){
        postfix[j]=pop(s);
        j++;
    }
    postfix[j]='\0';
    return postfix;


}








int main(int argc, char const *argv[])
{
    struct stack* sp=(struct stack*)malloc(sizeof(struct stack));
    sp->size=100;
    sp->top=-1;
    sp->arr=(char*)malloc(sp->size*sizeof(char));

    //push(sp,67);

    //char *exp="{{7-(3-2) + [8 +(99-11)]}}";

    char *infix="a-b*d+c//8+7*9+";
    check(sp);
    
    printf("The postfix expression is %s\n",inTopo(infix));


   
    
    //watchelements(sp);




   
    return 0;
}

