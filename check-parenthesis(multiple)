#include <stdio.h>
#include <stdlib.h>


struct stack{
    int size;
    int top;
    char * arr;
};


int isEmpty(struct stack *p){
    if(p->top<0){
        return 1;
    }else{
        return 0;
    }
}

int isFull(struct stack* p){
    if(p->top==p->size-1){
        return 1;
    }else{
        return 0;
    }
}
void push(struct stack *p,char value){
    if(isFull(p)){
        printf("Stack verflow");
    }
    else{
        p->top++;
        p->arr[p->top]=value;
    }
}

char pop(struct stack *top){
    if(isEmpty(top)){
        printf("Stack underflow , cannot remove elements");
    }else{
        char value=top->arr[top->top];
        top->top--;
        return value;
    }

}

void check(struct stack *sp){
    if(isEmpty(sp)){
        printf("The stack is empty\n");
    }else{
        printf("The stack is not empty\n");
    }
}

void watchelements(struct stack *s){
    for(int i=0;i<=s->top;i--){
        printf("Element : %d\n",s->arr[s->top]);
        s->top--;
        if(s->top<0){
            break;
        }
        continue;
    }
}

int match(char a,char b){
    if(a=='(' && b==')'){
        return 1;
    }
    if(a=='{' && b=='}'){
        return 1;
    }
    if(a=='[' && b==']'){
        return 1;
    }
    return 0;
}

int checkParenthesis(struct stack *s,char *exp){
    
    for(int i=0;exp[i]!='\0';i++){
        if(exp[i]=='(' || exp[i]=='[' || exp[i]=='{'){
            push(s,exp[i]);
        }
        else if(exp[i]==')'|| exp[i]==']'|| exp[i]=='}'){
            if(isEmpty(s)){
                return 0;
            }
            else{
                char popped=pop(s);
                if(!match(popped,exp[i])){
                    return 0;
                }
                


            }
        }

    

            
        
    }
    // to see if the stack has been emptied or not
    if(isEmpty(s)){
        return 1;
    }
    else{
        return 0;
    }

}




int main(int argc, char const *argv[])
{
    struct stack* sp=(struct stack*)malloc(sizeof(struct stack));
    sp->size=100;
    sp->top=-1;
    sp->arr=(char*)malloc(sp->size*sizeof(char));

    //push(sp,67);

    //char *exp="{{7-(3-2) + [8 +(99-11)]}}";

    char *exp="{(8-+(2+9))}";


   if(checkParenthesis(sp,exp)){
        printf("The parenthesis is balanced\n");
    }else{
        printf("The parenthesis is not balanced\n");
    }

   
    
    //watchelements(sp);




   
    return 0;
}

