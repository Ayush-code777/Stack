#include <stdio.h>
#include <stdlib.h>

struct stack{
    int size;
    int top;
    int *arr;
};

int isEmpty(struct stack * ptr){
    if(ptr->top<0){
        return 1;
    }else{
        return 0;
    }

}

int isFull(struct stack * p){
    if(p->top==p->size-1){
        return 1;

    }else{
        return 0;
    }
}

void push(struct stack *s,int value){
    if(isFull(s)){
        printf("stack overflow. Cannot insert anymore value\n");
    }
    else{
        s->top++;
        s->arr[s->top]=value;


    }
}

int pop(struct stack* sp){
    if(isEmpty(sp)){
        printf("Stack Underflow. Cannot remove any element\n");
    }
    else{
        int val=sp->arr[sp->top];
        sp->top--;
        return val;

    }
    
}

int peek(struct stack * sp,int i){
    int arrInd=sp->top-i+1;
    if(arrInd<0){
        printf("Invalid value of i\n");
        return -1;
    }else{
        return sp->arr[arrInd];

    }


}



int main(int argc, char const *argv[])
{
    struct stack *s=(struct stack*)malloc(sizeof(struct stack));
    s->size = 10;
    s->top = -1;
    s->arr = (int*)malloc(s->size*sizeof(int));


    //Adding manually
    //s->arr[0]=3;
    //s->top++;
    //Checking if teh stack is empty or not by callign the functions
    if(isEmpty(s)){
        printf("The stack is empty\n");
    }else{
        printf("The stack is not empty\n");
    }
    push(s,76);
    push(s,75);
    push(s,655);
    push(s,52);
    push(s,612);
    
   


    //peek(s,7);
    for (int j = 1; j <= s->top+1; j++)
    {
        printf("Element %d : %d\n",j,peek(s,j));
    }
    
    return 0;
}
